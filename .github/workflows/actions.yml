name: deploy-actions

on:
  push:
    branches: [ "main" ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and run tests with Gradle
        run: ./gradlew clean build --no-daemon

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: jar-artifact
          path: build/libs/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: jar-artifact

      # 이 단계에서는 다운로드된 JAR 파일을 올바른 디렉토리 구조로 정리합니다.
      - name: Arrange artifact structure
        run: |
          mkdir -p build/libs
          # 현재 워크스페이스에 jar 파일들이 있다면 build/libs 폴더로 이동
          mv *.jar build/libs/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest \
            --push .

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/MVP_back
            docker-compose pull
            docker-compose up -d
