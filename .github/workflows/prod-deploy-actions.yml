  name: deploy-actions

  on:
    push:
      branches: [ "main" ]

  jobs:
    build-test:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Set up JDK 17
          uses: actions/setup-java@v4
          with:
            java-version: '17'
            distribution: 'temurin'

        - name: Build and run tests with Gradle
          run: ./gradlew clean build --no-daemon

        - name: Upload build artifact
          uses: actions/upload-artifact@v4
          with:
              name: jar-artifact
              path: build/libs/*.jar

    deploy:
      runs-on: ubuntu-latest
      needs: build-test
      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Download build artifact
          uses: actions/download-artifact@v4
          with:
              name: jar-artifact
              path: build/libs

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-northeast-2

        # ECR 로그인
        - name: Login to Amazon ECR
          uses: aws-actions/amazon-ecr-login@v1

        # Docker 이미지 빌드 및 푸시 (대상 플랫폼: linux/amd64)
        - name: Build and push Docker image
          run: |
            docker buildx build --platform linux/amd64 \
            -f Dockerfile \
            -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest \
            --push .

        # EC2에서 기존 docker-compose.yml (또는 같은 이름의 디렉토리) 제거
        - name: Remove existing docker-compose file on EC2 via SSH
          uses: appleboy/ssh-action@v1.2.0
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USER }}
            key: ${{ secrets.EC2_SSH_KEY }}
            script: |
              rm -rf /home/ubuntu/MVP_back/docker-compose.yml

        # docker-compose.yml 파일을 EC2로 전송 (SCP 방식)
        - name: Copy docker-compose file to EC2
          uses: appleboy/scp-action@master
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USER }}
            key: ${{ secrets.EC2_SSH_KEY }}
            source: "docker-compose.yml"
            target: "/home/ubuntu/MVP_back/"

        # EC2에 배포 (Docker Compose 사용)
        - name: Deploy to EC2 via SSH
          uses: appleboy/ssh-action@v1.2.0
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USER }}
            key: ${{ secrets.EC2_SSH_KEY }}
            script: |
              cd /home/ubuntu/MVP_back
              docker compose pull
              docker compose up -d